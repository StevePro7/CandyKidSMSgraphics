                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.0 #9615 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module input_manager
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _devkit_PORT_A_KEY_2
                             12 	.globl _devkit_PORT_A_KEY_1
                             13 	.globl _devkit_PORT_A_KEY_RIGHT
                             14 	.globl _devkit_PORT_A_KEY_LEFT
                             15 	.globl _devkit_PORT_A_KEY_DOWN
                             16 	.globl _devkit_PORT_A_KEY_UP
                             17 	.globl _devkit_SMS_getKeysStatus
                             18 	.globl _engine_input_manager_update
                             19 	.globl _engine_input_manager_hold_up
                             20 	.globl _engine_input_manager_hold_down
                             21 	.globl _engine_input_manager_hold_left
                             22 	.globl _engine_input_manager_hold_right
                             23 	.globl _engine_input_manager_hold_fire1
                             24 	.globl _engine_input_manager_hold_fire2
                             25 	.globl _engine_input_manager_move_up
                             26 	.globl _engine_input_manager_move_down
                             27 	.globl _engine_input_manager_move_left
                             28 	.globl _engine_input_manager_move_right
                             29 	.globl _engine_input_manager_move_fire1
                             30 	.globl _engine_input_manager_move_fire2
                             31 ;--------------------------------------------------------
                             32 ; special function registers
                             33 ;--------------------------------------------------------
                             34 ;--------------------------------------------------------
                             35 ; ram data
                             36 ;--------------------------------------------------------
                             37 	.area _DATA
                             38 ;--------------------------------------------------------
                             39 ; ram data
                             40 ;--------------------------------------------------------
                             41 	.area _INITIALIZED
   0000                      42 _curr_joypad1:
   0000                      43 	.ds 2
   0002                      44 _prev_joypad1:
   0002                      45 	.ds 2
                             46 ;--------------------------------------------------------
                             47 ; absolute external ram data
                             48 ;--------------------------------------------------------
                             49 	.area _DABS (ABS)
                             50 ;--------------------------------------------------------
                             51 ; global & static initialisations
                             52 ;--------------------------------------------------------
                             53 	.area _HOME
                             54 	.area _GSINIT
                             55 	.area _GSFINAL
                             56 	.area _GSINIT
                             57 ;--------------------------------------------------------
                             58 ; Home
                             59 ;--------------------------------------------------------
                             60 	.area _HOME
                             61 	.area _HOME
                             62 ;--------------------------------------------------------
                             63 ; code
                             64 ;--------------------------------------------------------
                             65 	.area _CODE
                             66 ;input_manager.c:13: void engine_input_manager_update()
                             67 ;	---------------------------------
                             68 ; Function engine_input_manager_update
                             69 ; ---------------------------------
   0000                      70 _engine_input_manager_update::
                             71 ;input_manager.c:15: prev_joypad1 = curr_joypad1;
   0000 2Ar00r00      [16]   72 	ld	hl,(_curr_joypad1)
   0003 22r02r00      [16]   73 	ld	(_prev_joypad1),hl
                             74 ;input_manager.c:16: curr_joypad1 = devkit_SMS_getKeysStatus();
   0006 CDr00r00      [17]   75 	call	_devkit_SMS_getKeysStatus
   0009 22r00r00      [16]   76 	ld	(_curr_joypad1),hl
   000C C9            [10]   77 	ret
                             78 ;input_manager.c:20: unsigned char engine_input_manager_hold_up()
                             79 ;	---------------------------------
                             80 ; Function engine_input_manager_hold_up
                             81 ; ---------------------------------
   000D                      82 _engine_input_manager_hold_up::
                             83 ;input_manager.c:22: return engine_input_manager_hold( devkit_PORT_A_KEY_UP() );
   000D CDr00r00      [17]   84 	call	_devkit_PORT_A_KEY_UP
   0010 E5            [11]   85 	push	hl
   0011 CDr79r00      [17]   86 	call	_engine_input_manager_hold
   0014 F1            [10]   87 	pop	af
   0015 C9            [10]   88 	ret
                             89 ;input_manager.c:24: unsigned char engine_input_manager_hold_down()
                             90 ;	---------------------------------
                             91 ; Function engine_input_manager_hold_down
                             92 ; ---------------------------------
   0016                      93 _engine_input_manager_hold_down::
                             94 ;input_manager.c:26: return engine_input_manager_hold( devkit_PORT_A_KEY_DOWN() );
   0016 CDr00r00      [17]   95 	call	_devkit_PORT_A_KEY_DOWN
   0019 E5            [11]   96 	push	hl
   001A CDr79r00      [17]   97 	call	_engine_input_manager_hold
   001D F1            [10]   98 	pop	af
   001E C9            [10]   99 	ret
                            100 ;input_manager.c:28: unsigned char engine_input_manager_hold_left()
                            101 ;	---------------------------------
                            102 ; Function engine_input_manager_hold_left
                            103 ; ---------------------------------
   001F                     104 _engine_input_manager_hold_left::
                            105 ;input_manager.c:30: return engine_input_manager_hold( devkit_PORT_A_KEY_LEFT() );
   001F CDr00r00      [17]  106 	call	_devkit_PORT_A_KEY_LEFT
   0022 E5            [11]  107 	push	hl
   0023 CDr79r00      [17]  108 	call	_engine_input_manager_hold
   0026 F1            [10]  109 	pop	af
   0027 C9            [10]  110 	ret
                            111 ;input_manager.c:32: unsigned char engine_input_manager_hold_right()
                            112 ;	---------------------------------
                            113 ; Function engine_input_manager_hold_right
                            114 ; ---------------------------------
   0028                     115 _engine_input_manager_hold_right::
                            116 ;input_manager.c:34: return engine_input_manager_hold( devkit_PORT_A_KEY_RIGHT() );
   0028 CDr00r00      [17]  117 	call	_devkit_PORT_A_KEY_RIGHT
   002B E5            [11]  118 	push	hl
   002C CDr79r00      [17]  119 	call	_engine_input_manager_hold
   002F F1            [10]  120 	pop	af
   0030 C9            [10]  121 	ret
                            122 ;input_manager.c:36: unsigned char engine_input_manager_hold_fire1()
                            123 ;	---------------------------------
                            124 ; Function engine_input_manager_hold_fire1
                            125 ; ---------------------------------
   0031                     126 _engine_input_manager_hold_fire1::
                            127 ;input_manager.c:38: return engine_input_manager_hold( devkit_PORT_A_KEY_1() );
   0031 CDr00r00      [17]  128 	call	_devkit_PORT_A_KEY_1
   0034 E5            [11]  129 	push	hl
   0035 CDr79r00      [17]  130 	call	_engine_input_manager_hold
   0038 F1            [10]  131 	pop	af
   0039 C9            [10]  132 	ret
                            133 ;input_manager.c:40: unsigned char engine_input_manager_hold_fire2()
                            134 ;	---------------------------------
                            135 ; Function engine_input_manager_hold_fire2
                            136 ; ---------------------------------
   003A                     137 _engine_input_manager_hold_fire2::
                            138 ;input_manager.c:42: return engine_input_manager_hold( devkit_PORT_A_KEY_2() );
   003A CDr00r00      [17]  139 	call	_devkit_PORT_A_KEY_2
   003D E5            [11]  140 	push	hl
   003E CDr79r00      [17]  141 	call	_engine_input_manager_hold
   0041 F1            [10]  142 	pop	af
   0042 C9            [10]  143 	ret
                            144 ;input_manager.c:46: unsigned char engine_input_manager_move_up()
                            145 ;	---------------------------------
                            146 ; Function engine_input_manager_move_up
                            147 ; ---------------------------------
   0043                     148 _engine_input_manager_move_up::
                            149 ;input_manager.c:48: return engine_input_manager_move( devkit_PORT_A_KEY_UP() );
   0043 CDr00r00      [17]  150 	call	_devkit_PORT_A_KEY_UP
   0046 E5            [11]  151 	push	hl
   0047 CDrB7r00      [17]  152 	call	_engine_input_manager_move
   004A F1            [10]  153 	pop	af
   004B C9            [10]  154 	ret
                            155 ;input_manager.c:50: unsigned char engine_input_manager_move_down()
                            156 ;	---------------------------------
                            157 ; Function engine_input_manager_move_down
                            158 ; ---------------------------------
   004C                     159 _engine_input_manager_move_down::
                            160 ;input_manager.c:52: return engine_input_manager_move( devkit_PORT_A_KEY_DOWN() );
   004C CDr00r00      [17]  161 	call	_devkit_PORT_A_KEY_DOWN
   004F E5            [11]  162 	push	hl
   0050 CDrB7r00      [17]  163 	call	_engine_input_manager_move
   0053 F1            [10]  164 	pop	af
   0054 C9            [10]  165 	ret
                            166 ;input_manager.c:54: unsigned char engine_input_manager_move_left()
                            167 ;	---------------------------------
                            168 ; Function engine_input_manager_move_left
                            169 ; ---------------------------------
   0055                     170 _engine_input_manager_move_left::
                            171 ;input_manager.c:56: return engine_input_manager_move( devkit_PORT_A_KEY_LEFT() );
   0055 CDr00r00      [17]  172 	call	_devkit_PORT_A_KEY_LEFT
   0058 E5            [11]  173 	push	hl
   0059 CDrB7r00      [17]  174 	call	_engine_input_manager_move
   005C F1            [10]  175 	pop	af
   005D C9            [10]  176 	ret
                            177 ;input_manager.c:58: unsigned char engine_input_manager_move_right()
                            178 ;	---------------------------------
                            179 ; Function engine_input_manager_move_right
                            180 ; ---------------------------------
   005E                     181 _engine_input_manager_move_right::
                            182 ;input_manager.c:60: return engine_input_manager_move( devkit_PORT_A_KEY_RIGHT() );
   005E CDr00r00      [17]  183 	call	_devkit_PORT_A_KEY_RIGHT
   0061 E5            [11]  184 	push	hl
   0062 CDrB7r00      [17]  185 	call	_engine_input_manager_move
   0065 F1            [10]  186 	pop	af
   0066 C9            [10]  187 	ret
                            188 ;input_manager.c:62: unsigned char engine_input_manager_move_fire1()
                            189 ;	---------------------------------
                            190 ; Function engine_input_manager_move_fire1
                            191 ; ---------------------------------
   0067                     192 _engine_input_manager_move_fire1::
                            193 ;input_manager.c:64: return engine_input_manager_move( devkit_PORT_A_KEY_1() );
   0067 CDr00r00      [17]  194 	call	_devkit_PORT_A_KEY_1
   006A E5            [11]  195 	push	hl
   006B CDrB7r00      [17]  196 	call	_engine_input_manager_move
   006E F1            [10]  197 	pop	af
   006F C9            [10]  198 	ret
                            199 ;input_manager.c:66: unsigned char engine_input_manager_move_fire2()
                            200 ;	---------------------------------
                            201 ; Function engine_input_manager_move_fire2
                            202 ; ---------------------------------
   0070                     203 _engine_input_manager_move_fire2::
                            204 ;input_manager.c:68: return engine_input_manager_move( devkit_PORT_A_KEY_2() );
   0070 CDr00r00      [17]  205 	call	_devkit_PORT_A_KEY_2
   0073 E5            [11]  206 	push	hl
   0074 CDrB7r00      [17]  207 	call	_engine_input_manager_move
   0077 F1            [10]  208 	pop	af
   0078 C9            [10]  209 	ret
                            210 ;input_manager.c:72: static unsigned char engine_input_manager_hold( unsigned int data )
                            211 ;	---------------------------------
                            212 ; Function engine_input_manager_hold
                            213 ; ---------------------------------
   0079                     214 _engine_input_manager_hold:
                            215 ;input_manager.c:74: return curr_joypad1 & data && !( prev_joypad1 & data );
   0079 3Ar00r00      [13]  216 	ld	a,(#_curr_joypad1 + 0)
   007C FD 21 02 00   [14]  217 	ld	iy,#2
   0080 FD 39         [15]  218 	add	iy,sp
   0082 FD A6 00      [19]  219 	and	a, 0 (iy)
   0085 4F            [ 4]  220 	ld	c,a
   0086 3Ar01r00      [13]  221 	ld	a,(#_curr_joypad1 + 1)
   0089 FD 21 02 00   [14]  222 	ld	iy,#2
   008D FD 39         [15]  223 	add	iy,sp
   008F FD A6 01      [19]  224 	and	a, 1 (iy)
   0092 B1            [ 4]  225 	or	a,c
   0093 28 1C         [12]  226 	jr	Z,00103$
   0095 3Ar02r00      [13]  227 	ld	a,(#_prev_joypad1 + 0)
   0098 FD 21 02 00   [14]  228 	ld	iy,#2
   009C FD 39         [15]  229 	add	iy,sp
   009E FD A6 00      [19]  230 	and	a, 0 (iy)
   00A1 4F            [ 4]  231 	ld	c,a
   00A2 3Ar03r00      [13]  232 	ld	a,(#_prev_joypad1 + 1)
   00A5 FD 21 02 00   [14]  233 	ld	iy,#2
   00A9 FD 39         [15]  234 	add	iy,sp
   00AB FD A6 01      [19]  235 	and	a, 1 (iy)
   00AE B1            [ 4]  236 	or	a,c
   00AF 28 03         [12]  237 	jr	Z,00104$
   00B1                     238 00103$:
   00B1 2E 00         [ 7]  239 	ld	l,#0x00
   00B3 C9            [10]  240 	ret
   00B4                     241 00104$:
   00B4 2E 01         [ 7]  242 	ld	l,#0x01
   00B6 C9            [10]  243 	ret
                            244 ;input_manager.c:76: static unsigned char engine_input_manager_move( unsigned int data )
                            245 ;	---------------------------------
                            246 ; Function engine_input_manager_move
                            247 ; ---------------------------------
   00B7                     248 _engine_input_manager_move:
                            249 ;input_manager.c:78: return curr_joypad1 & data;
   00B7 3Ar00r00      [13]  250 	ld	a,(#_curr_joypad1 + 0)
   00BA FD 21 02 00   [14]  251 	ld	iy,#2
   00BE FD 39         [15]  252 	add	iy,sp
   00C0 FD A6 00      [19]  253 	and	a, 0 (iy)
   00C3 6F            [ 4]  254 	ld	l,a
   00C4 3Ar01r00      [13]  255 	ld	a,(#_curr_joypad1 + 1)
   00C7 FD 21 02 00   [14]  256 	ld	iy,#2
   00CB FD 39         [15]  257 	add	iy,sp
   00CD FD A6 01      [19]  258 	and	a, 1 (iy)
   00D0 C9            [10]  259 	ret
                            260 	.area _CODE
                            261 	.area _INITIALIZER
   0000                     262 __xinit__curr_joypad1:
   0000 00 00               263 	.dw #0x0000
   0002                     264 __xinit__prev_joypad1:
   0002 00 00               265 	.dw #0x0000
                            266 	.area _CABS (ABS)
